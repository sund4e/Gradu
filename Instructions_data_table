----Instructions: data.table----

LOAD PACKAGE
require(data.table) #returns true if package is loaded
library(data.table)

ASSIGN DATA FRAME TO TABLE
table = as.data.table(dataframe)

VIEW TABLE
View(table) #whole table
head(table) #first rows

ACCESS ROWS
select row 1: table[1, ]
select rows 1-5: table[1:5, ]

ACCESS COLUMNS
table[, column]
table[, list(date, column)]

LIST ALL VALUES IN COLUMN
table$year

REMOVE COLUMN
table[,  column:=NULL]

SELECT ROWS ON CONDITION TO COLUMN
table[year > 2010, ]
table[year == 2010, ]
table[column == "Jeejee", ]

AND (&) and OR (|)
table[year < 2010 & year > 2000 | column == "Jeejee", ]

SORT DATA
table[order(salary), ]
table[order(year, salary), ] order based on year and then based on salary

table.filtered = table[year > 2010, ]
table.filtered.sorted = table.filtered[order(year), ]

COLUMN OPERATIONS
mean(table$salaries)
max(table$salaries)
median(table$salaries)

mean(table[year == 2000, ]$salaries)

SUMMARIES
summariezed.year = table[, mean(salary), by="year"]
summariezed.year = table[, list(Average=mean(salary)), by="year"] #name the mean column as average
summariezed.year = table[, list(Average=mean(salary)), Maximum=max(salary)), by="year"]
summariezed.year.team = table[, list(Average=mean(salary)), by=c("year", "team")] #c() is a vector

campaigns <- adsets[, list(adsets=.N), by=c("campaign_id", "date")] #creates a table with number of adsets column
adsets[, adsets:=.N, by=c("campaign_id", "date")] #add new column that summarizes the mumber of ad sets per campaign

MERGE DATA TABLES
mergerd = merge(table, table2, by="playerID") #combine tables "table" & "table2" by playerID
merged[, name:=paste(nameFirstm nameLast)] #add new column called "name" that combines nameFirst and nameLast
mergerd = merge(table, table2, by=c("playerID", "year")) #combine tables by both playerID and year
mergerd = merge(table, table2, by="playerID", all.x=TRUE) #left join tables, combine them keeping all of the x(first) table values

---Instructions ggplot2---

library(ggplot2)
ggplot(table, aes(year, salary)) + geom_point() #draws scatter plot of salaries havin year as x axis
ggplot(summarized.year, aes(year, Average)) + geom_line() #draws line graph of average salary per year
ggplot(summarized.year.team, aes(year, Average, color=team)) + geom_line() #draws line graph of average salary per year for all of the teams

-----GG2PLOT--------
require(ggplot2)

ggplot(diamonds, aes(x=carat, y=price)) + geom_point()
ggplot(diamonds, aes(x=carat, y=price, color=clarity)) + geom_point() #other possible aestics are e.g. size & shape

ggplot(diamonds, aes(x=carat, y=price)) + geom_point() + geom_smooth() # Adds another layer which contains a trend line
ggplot(diamonds, aes(x=carat, y=price)) + geom_point() + geom_smooth(se=FALSE, method="lm") #Doesn't show the standard error and uses linear line

ggplot(diamonds, aes(x=carat, y=price, color=clarity)) + geom_pont() + facet_wrap(~ clarity) #draws facets explained by different clarities
ggplot(diamonds, aes(x=price)) + geom_histogram() + facet_wrap(~ clarity, scale=free_y) #lets each histogram to have scaled y axis
ggplot(diamonds, aes(x=carat, y=price, color=clarity)) + geom_pont() + facet_grid(color ~ clarity) #grid of graphs based on color & clarity

ggplot(diamonds, aes(x=carat, y=price)) + geom_point() + ggtitle("My plot") + xlab("X title") + xlim(0, 2) #titles & limit for x axis

ggplot(diamonds, aes(x=price)) + geom_histogram()
ggplot(diamonds, aes(x=price)) + geom_histogram(binwidth=200) #change the width of the bars
ggplot(diamonds, aes(x=price, fill=clarity)) + geom_histogram() #change color based on clarity

ggplot(diamonds, aes(x=price, color = cut)) + geom_density()

